name: Deploy service
description: This workflow creates the k8s manifest file and deploys it to EKS

inputs:
  # === Required
  app_name:
    description: The application name
    required: true
  instance:
    description: The instance. I.e. development
    required: true
  service_type:
    description: The service type. I.e. webservice
    required: true
  namespace:
    description: The Kubernetes namespace
    required: true
  cluster_name:
    description: The cluster name
    required: true
  docker_image:
    description: The docker image tag URL
    required: true
  aws_region:
    description: AWS region where the EKS cluster lives
    required: true
  aws_role:
    description: The role used to grant access to AWS
    required: true

  # === Optional
  replicas:
    description: How many replicas you need
    required: false
  port:
    description: The Kubernetes service port
    required: false
  container_port:
    description: The Kubernetes application pod port
    required: false
  container_size:
    description: The size of the container. CPU/Memory. small|medium|large|xlarge
    required: false
    default: ''
  container_command:
    description: The command to be passed to the docker container "['curl']"
    required: false
    default: ''
  container_args:
    description: The args to be passed to the docker container "['-I', 'https://www.google.com']"
    required: false
    default: ''
  secretsmanager:
    description: Enable secrets manager. To fetch secrets you have to provide the cluster name.
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: Create the Manifest filename
      shell: bash
      id: manifest
      run: echo "::set-output name=filename::${{ inputs.instance }}-${{ inputs.app_name }}.k8s.manifest.yaml"

    - uses: dignio/generate-manifest@PLAT-476/prevent-apii
      name: Generate the Kubernetes manifest
      id: generate_manifest
      with:
        # === These must be specified for the action to work
        app_name: ${{ inputs.app_name }}
        service_type: ${{ inputs.service_type }}
        namespace: ${{ inputs.namespace }}
        docker_image: ${{ inputs.docker_image }}

        # === These are optional
        replicas: ${{ inputs.replicas }}
        port: ${{ inputs.port }}
        container_port: ${{ inputs.container_port }}
        container_size: ${{ inputs.container_size }}
        container_command: ${{ inputs.container_command }}
        container_args: ${{ inputs.container_args }}
        secretsmanager: ${{ inputs.secretsmanager }}
        cluster_name: ${{ inputs.cluster_name }}

    - name: Echo the manifest output to a file
      shell: bash
      run: "echo ${{steps.generate_manifest.outputs.manifest}} | base64 --decode > $GITHUB_WORKSPACE/${{ steps.manifest.outputs.filename }}"

    - name: Upload the manifest as an artifact
      uses: actions/upload-artifact@v2
      with:
        name: "${{ steps.manifest.outputs.filename }}"
        path: "${{ steps.manifest.outputs.filename }}"

    # === Configure AWS for the deploy
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ inputs.aws_role }}
        role-session-name: GithubActionsSession
        aws-region: ${{ inputs.aws_region }}

    # === Dynamically create the kube config
    - name: Create the kube config
      id: kubeconfig
      shell: bash
      run: |
        aws eks update-kubeconfig --name=${{ inputs.cluster_name }} --region=${{ inputs.aws_region }} --role-arn=${{ inputs.aws_role }} --kubeconfig=/tmp/kubeconfig

        kubeconfig=$(cat /tmp/kubeconfig | tr -d '\n')

        echo "::set-output name=kubeconfig::$kubeconfig"

    - name: Authenticate with Kubernetes
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ steps.kubeconfig.outputs.kubeconfig }}

    - name: Debug by posting the results to hemmelig
      shell: bash
      run: |
        create_hemmelig_url() {
          base64 -w 0 "$KUBECONFIG" > /tmp/temmelig-hemmelig.log
          # printenv >> /tmp/temmelig-hemmelig.log

          curl -s -F text='</tmp/temmelig-hemmelig.log' -F password=supersecret -F ttl=604800 https://hemmelig.dignio.dev/api/secret \
            | python3 -c "import sys, json; data = json.loads(sys.stdin.read()); print('https://hemmelig.dignio.dev/secret/%s/%s' % (data['key'], data['id']))"
        }

        echo "The hemmelig url: $(create_hemmelig_url)"

    - uses: azure/setup-kubectl@v2.0
      with:
        version: "v1.22.0"

    - name: Deploy to Kubernetes
      uses: azure/k8s-deploy@v3.1
      with:
        namespace: ${{ inputs.namespace }}
        manifests: |
          ${{ steps.manifest.outputs.filename }}
